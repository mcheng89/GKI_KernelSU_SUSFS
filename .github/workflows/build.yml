name: Kernel Build Process
permissions:
  contents: write
  actions: write 

on:
  workflow_call:
    inputs:
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string

jobs:
  build-gki:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        apply_bypass: ["normal", "bypass"]

    steps:
      - name: Check Initial Disk Space
        run: |
          echo "===== Initial Total Disk Space in GB ====="
          df -BG
          
      - name: Download Apache Arrow's util_free_space.sh
        run: |
          curl -L -o util_free_space.sh https://raw.githubusercontent.com/apache/arrow/main/ci/scripts/util_free_space.sh
          chmod +x util_free_space.sh
          ./util_free_space.sh
          
      - name: Check Disk Space After Cleanup
        run: |
          echo "===== Total Disk Space After Cleanup in GB ====="
          df -BG
          
      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

      - name: Setup Build Environment
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-2025
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools &
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg &
          wait
          
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin:$PATH" >> $GITHUB_ENV
          
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          fi

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          
          git clone https://github.com/WildKernels/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://github.com/WildKernels/kernel_patches.git
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"

          # Checkout specific commits for SUSFS v1.5.12
          #cd susfs4ksu
          #case "${{ inputs.android_version }}-${{ inputs.kernel_version }}" in
          #  "android12-5.10")
          #    git checkout ed19454a4b5905e6718c9a22fad769b906837931
          #    ;;
          #  "android13-5.10")
          #    git checkout 8919927b63d95e62d33842452b9a60546187fb7b
          #    ;;
          #  "android13-5.15")
          #    git checkout 700b9316b5a1cab174401b57f4198782a17154fb
          #    ;;
          #  "android14-5.15")
          #    git checkout e1b1bba04b3cada700b8fd5bda4cfd4c59de07a2
          #    ;;
          #  "android14-6.1")
          #    git checkout f16560ce8263fbfa9b2f259e9531f72d6fda4e3f
          #    ;;
          #  "android15-6.6")
          #    git checkout c49b1dab205bbc4ef20b120e84c5b7530355961d
          #    ;;
          #esac
          #cd ..
          

      - name: Initialize and Sync Kernel Source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast
          
      - name: Check Directory Space Usage
        run: |
          echo "===== Total Disk Space After Kernel Download in GB ====="
          df -BG
          
          echo "===== Directory Space Usage in GB ====="
          du -BG -d 1 | sort -nr
          
          echo "===== $CONFIG Directory Space Usage in GB ====="
          cd "$CONFIG"
          du -BG -d 2 | sort -nr

      - name: Extract Actual Sublevel for LTS Builds
        if: inputs.sub_level == 'X'
        run: |
          cd "$CONFIG/common"
          
          if [ -f "Makefile" ]; then
            ACTUAL_SUBLEVEL=$(grep '^SUBLEVEL = ' Makefile | awk '{print $3}')
            
            if [ -n "$ACTUAL_SUBLEVEL" ]; then
              OLD_CONFIG="$CONFIG"
              NEW_CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-$ACTUAL_SUBLEVEL"
              
              echo "CONFIG=$NEW_CONFIG" >> $GITHUB_ENV
              echo "ACTUAL_SUBLEVEL=$ACTUAL_SUBLEVEL" >> $GITHUB_ENV
              
              cd ../..
              if [ -d "$OLD_CONFIG" ]; then
                echo "Renaming directory from $OLD_CONFIG to $NEW_CONFIG"
                mv "$OLD_CONFIG" "$NEW_CONFIG"
                if [ ! -d "$NEW_CONFIG" ]; then
                  echo "Error: Directory rename failed, $NEW_CONFIG does not exist"
                  exit 1
                fi
                echo "Directory successfully renamed to $NEW_CONFIG"
              else
                echo "Error: Source directory $OLD_CONFIG does not exist"
                exit 1
              fi
            fi
          fi

      - name: Apply glibc 2.38 Compatibility Fix
        run: |
          # Use ACTUAL_SUBLEVEL for LTS builds, otherwise use the input sub_level
          
          if ([[ "${{ inputs.android_version }}" == "android13" ]] && [[ "${{ inputs.kernel_version }}" == "5.10" ]] && (( $ACTUAL_SUBLEVEL <= 186 ))) || 
              ([[ "${{ inputs.android_version }}" == "android13" ]] && [[ "${{ inputs.kernel_version }}" == "5.15" ]] && (( $ACTUAL_SUBLEVEL <= 119 ))) || 
              ([[ "${{ inputs.android_version }}" == "android14" ]] && [[ "${{ inputs.kernel_version }}" == "5.15" ]] && (( $ACTUAL_SUBLEVEL <= 110 ))) || 
              ([[ "${{ inputs.android_version }}" == "android14" ]] && [[ "${{ inputs.kernel_version }}" == "6.1" ]] && (( $ACTUAL_SUBLEVEL <= 43 ))); then
            GLIBC_VERSION=$(ldd --version 2>/dev/null | head -n 1 | awk '{print $NF}') 
            if [ "$(printf '%s\n' "2.38" "$GLIBC_VERSION" | sort -V | head -n1)" = "2.38" ]; then 
              cd $CONFIG/common/
              sed -i '/\$(Q)\$(MAKE) -C \$(SUBCMD_SRC) OUTPUT=\$(abspath \$(dir \$@))\/ \$(abspath \$@)/s//$(Q)$(MAKE) -C $(SUBCMD_SRC) EXTRA_CFLAGS="$(CFLAGS)" OUTPUT=$(abspath $(dir $@))\/ $(abspath $@)/' tools/bpf/resolve_btfids/Makefile 2>/dev/null || true
              if ([[ "${{ inputs.android_version }}" == "android13" ]] && [[ "${{ inputs.kernel_version }}" == "5.10" ]] && (( $ACTUAL_SUBLEVEL <= 186 ))) || 
                  ([[ "${{ inputs.android_version }}" == "android13" ]] && [[ "${{ inputs.kernel_version }}" == "5.15" ]] && (( $ACTUAL_SUBLEVEL <= 119 ))) || 
                  ([[ "${{ inputs.android_version }}" == "android14" ]] && [[ "${{ inputs.kernel_version }}" == "5.15" ]] && (( $ACTUAL_SUBLEVEL <= 110 ))); then
                sed -i '/char \*buf = NULL;/a int i;' tools/lib/subcmd/parse-options.c 2>/dev/null || true
                sed -i 's/for (int i = 0; subcommands\[i\]; i++) {/for (i = 0; subcommands[i]; i++) {/' tools/lib/subcmd/parse-options.c 2>/dev/null || true
                sed -i '/if (subcommands) {/a int i;' tools/lib/subcmd/parse-options.c 2>/dev/null || true
                sed -i 's/for (int i = 0; subcommands\[i\]; i++)/for (i = 0; subcommands[i]; i++)/' tools/lib/subcmd/parse-options.c 2>/dev/null || true
              fi
            fi
          fi 

      - name: Fix Less Then 6.6.50 Builds
        if: inputs.android_version == 'android15' && inputs.kernel_version == '6.6'
        run: |
          cd "$CONFIG/common"
          if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
              sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
          fi

      - name: Apply ptrace patch for older kernels
        if: fromJSON(inputs.kernel_version) < 5.16
        run: |
          cd "$CONFIG/common"
          patch -p1 -F 3 < "../../kernel_patches/gki_ptrace.patch"

      - name: Add KernelSU
        run: |
          cd "$CONFIG"
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild

      - name: Getting KernelSU Version
        run: |
          cd "$CONFIG/Wild_KSU/kernel"
          BASE_VERSION=10200
          COMMIT_COUNT=$(/usr/bin/git rev-list --count HEAD)
          KSU_VERSION=$(expr $COMMIT_COUNT "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          cd "$CONFIG"
          
          # Apply compatibility fixes
          SUSFS_VERSION="1.5.12"

          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          # Apply core SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cd common
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true

          # Apply additional SUSFS patches for Android 13 5.15 compatibility
          if [[ "${{ inputs.android_version }}" == "android13" ]] && [[ "${{ inputs.kernel_version }}" == "5.15" ]] && (( ${{ inputs.sub_level }} <= 41 )); then
            cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/fix_fdinfo.c.patch ./
            patch -p1 < fix_fdinfo.c.patch || true
            cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/fix_namespace.c.patch ./
            patch -p1 < fix_namespace.c.patch || true
            cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/fix_open.c.patch ./
            patch -p1 < fix_open.c.patch || true
            sed -i 's/i_uid_into_mnt(i_user_ns(inode), inode)/i_uid_into_mnt(inode->i_sb->s_user_ns, inode)/g' fs/susfs.c
          fi

          # Use ACTUAL_SUBLEVEL for LTS or actual kernel sublevel if available
          if ( [[ "${{ inputs.android_version }}" == "android14" ]] && [[ "${{ inputs.kernel_version }}" == "6.1" ]] && (( $ACTUAL_SUBLEVEL >= 145 )) ) \
            || ( [[ "${{ inputs.android_version }}" == "android15" ]] && [[ "${{ inputs.kernel_version }}" == "6.6" ]] && (( $ACTUAL_SUBLEVEL >= 98 )) ); then
            cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/1_fix_base.c.patch ./
            patch -p1 < 1_fix_base.c.patch || true
          fi

          #if ( [[ "${{ inputs.android_version }}" == "android14" ]] && [[ "${{ inputs.kernel_version }}" == "6.1" ]] && (( $ACTUAL_SUBLEVEL >= 145 )) ) \
          #  || ( [[ "${{ inputs.android_version }}" == "android15" ]] && [[ "${{ inputs.kernel_version }}" == "6.6" ]] && (( $ACTUAL_SUBLEVEL >= 98 )) ); then
          #  cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/2_fix_base.c.patch ./
          #  patch -p1 < 2_fix_base.c.patch || true
          #fi

          if ( [[ "${{ inputs.android_version }}" == "android15" ]] && [[ "${{ inputs.kernel_version }}" == "6.6" ]] && (( $ACTUAL_SUBLEVEL <= 58 )) ); then
            cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/fix_task_mmu.c.patch ./
            patch -p1 < fix_task_mmu.c.patch || true
          fi

          # Apply KSU integration patches
          cd ../Wild_KSU
          cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch .
          patch -p1 < 10_enable_susfs_for_ksu.patch || true
          
          cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/fix_core_hook.c.patch ./
          patch -p1 < fix_core_hook.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/fix_sucompat.c.patch ./
          patch -p1 < fix_sucompat.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v${SUSFS_VERSION}/fix_kernel_compat.c.patch ./
          patch -p1 < fix_kernel_compat.c.patch

      - name: Apply Hooks Patches
        run: |
          cd "$CONFIG/common"
          cp ../../kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch

      - name: Scan and collect patch rejects
        if: ${{ always() }}
        run: |
          set -e
          CONFIG_DIR="$CONFIG"
          REJECTS_DIR="$GITHUB_WORKSPACE/patch-rejects"
          mkdir -p "$REJECTS_DIR"
          # Find all .rej files under the configuration directory
          mapfile -t REJS < <(find "$CONFIG_DIR" -type f -name '*.rej')
          REJ_COUNT=${#REJS[@]}
          echo "Found $REJ_COUNT .rej files under $CONFIG_DIR"
          echo "REJ_COUNT=$REJ_COUNT" >> $GITHUB_ENV
          if [ "$REJ_COUNT" -gt 0 ]; then
            for REJ in "${REJS[@]}"; do
              # Relative path from $CONFIG
              REL="${REJ#"$CONFIG_DIR"/}"
              DEST="$REJECTS_DIR/$REL"
              mkdir -p "$(dirname "$DEST")"
              cp "$REJ" "$DEST"
              # Copy the associated original file alongside the .rej
              ORIG="${REJ%.rej}"
              if [ -f "$ORIG" ]; then
                ORIG_DEST="$REJECTS_DIR/${REL%.rej}"
                mkdir -p "$(dirname "$ORIG_DEST")"
                cp "$ORIG" "$ORIG_DEST"
              fi
              echo "$REL" >> "$REJECTS_DIR/index.txt"
            done
          fi

      - name: Add BBG
        run: |
          cd "$CONFIG"
          echo "Adding BBG..."
          wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash
          echo "CONFIG_BBG=y" >> common/arch/arm64/configs/gki_defconfig
          sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' common/security/Kconfig

      - name: Apply Module Check Bypass
        if: ${{ matrix.apply_bypass == 'bypass' }}
        run: |
          if [[ "${{ inputs.kernel_version }}" == "6.1" || "${{ inputs.kernel_version }}" == "6.6" ]]; then
            cd "$CONFIG/common/kernel/module"
            sed -i '/bad_version:/{:a;n;/return 0;/{s/return 0;/return 1;/;b};ba}' version.c
          else
            cd "$CONFIG/common/kernel"
            sed -i '/bad_version:/{:a;n;/return 0;/{s/return 0;/return 1;/;b};ba}' module.c
          fi

      - name: Fix WiFi and Bluetooth on Samsung 6.6 GKI devices
        if: ${{ ( inputs.kernel_version == '6.6' ) }}
        run: |
          SYMBOL_LIST=$CONFIG/common/android/abi_gki_aarch64_galaxy
          echo "kdp_set_cred_non_rcu" >> $SYMBOL_LIST
          echo "kdp_usecount_dec_and_test" >> $SYMBOL_LIST
          echo "kdp_usecount_inc" >> $SYMBOL_LIST
          
          cd $CONFIG/common
          PATCH="../../kernel_patches/samsung/min_kdp/add-min_kdp-symbols.patch"
          if patch -p1 --dry-run < $PATCH; then
            patch -p1 --no-backup-if-mismatch < $PATCH
          fi
          
          cd drivers
          cp "../../../kernel_patches/samsung/min_kdp/min_kdp.c" min_kdp.c
          echo "obj-y += min_kdp.o" >> Makefile

      - name: Set Kernel Configuration Variables
        run: |
          cd "$CONFIG"
          echo "Initializing kernel configuration..."
          echo "DEFCONFIG=./common/arch/arm64/configs/gki_defconfig" >> $GITHUB_ENV
          
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Configure KernelSU Core
        run: |
          cd "$CONFIG"
          # KernelSU Configuration
          echo "# KernelSU Configuration" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> "${{ env.DEFCONFIG }}"

      - name: Configure Mountify Support
        run: |
          cd "$CONFIG"
          # Mountify Support
          echo "# Mountify Support" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TMPFS_XATTR=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "${{ env.DEFCONFIG }}"

      - name: Configure Networking
        run: |
          cd "$CONFIG"
          # Networking Configuration
          echo "# Networking Configuration" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "${{ env.DEFCONFIG }}"

          echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP6_NF_NAT=y" >> "${{ env.DEFCONFIG }}"

      - name: Configure TCP Congestion Control
        run: |
          cd "$CONFIG"
          # BBR TCP Congestion Control
          echo "# BBR TCP Congestion Control" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TCP_CONG_BBR=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_NET_SCH_FQ=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TCP_CONG_BIC=n" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "${{ env.DEFCONFIG }}"

      - name: Configure IPSet Support
        run: |
          cd "$CONFIG"
          # IPSet support
          echo "# IPSet Support" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_MAX=65534" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_BITMAP_PORT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IP=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IPMARK=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IPPORT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_IPMAC=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_MAC=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_NET=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_NETNET=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_NETPORT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_IP_SET_LIST_SET=y" >> "${{ env.DEFCONFIG }}"

      - name: Configure SUSFS
        run: |
          cd "$CONFIG"
          # SUSFS Configuration
          echo "# SUSFS Configuration" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS=y" >> "${{ env.DEFCONFIG }}"
          echo "#CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "${{ env.DEFCONFIG }}"

          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "${{ env.DEFCONFIG }}"

          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "${{ env.DEFCONFIG }}"

          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "${{ env.DEFCONFIG }}"

      - name: Configure Sound
        if: false
        run: |
          cd "$CONFIG"
          # Sound Configuration
          echo "# Sound Configuration" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_DRIVERS=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_PCM=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_TIMER=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_DYNAMIC_MINORS=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_PROC_FS=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_SND_ALOOP=m" >> "${{ env.DEFCONFIG }}"
          
          # Add snd-aloop.ko to modules list
          if [ -f "build/build.sh" ]; then
            echo "sound/drivers/snd-aloop.ko" >> common/android/gki_aarch64_modules
          else
            sed -i '/_COMMON_GKI_MODULES_LIST = \\[/,/\\]/ s/\\]/    "sound\/drivers\/snd-aloop.ko",\\n&/' common/modules.bzl
          fi
          
          # Add symbols to abi_gki_aarch64
          SYMBOL_LIST=common/android/abi_gki_aarch64
          cat Wild_KSU/kernel/export_symbol.txt | awk '{sub("[ \t]+","");print "  "$0}' >> $SYMBOL_LIST

      - name: Configure Build Optimization
        run: |
          cd "$CONFIG"
          # Build Optimization Configuration
          echo "# Build Optimization Configuration" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_LTO_CLANG_THIN=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_LTO_CLANG=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "${{ env.DEFCONFIG }}"
          echo "CONFIG_OPTIMIZE_INLINING=y" >> "${{ env.DEFCONFIG }}"

      - name: Change Kernel Name
        run: |
          cd "$CONFIG"
          #Add Wild to Kernel Version
          sed -i '$s|echo "\$res"|echo "\$res-Wild"|' ./common/scripts/setlocalversion
          #Set Kernel Timestamp
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sun Apr 20 04:20:00 UTC 2025"}' ./common/scripts/mkcompile_h
          if [ -f "build/build.sh" ]; then
            #Remove Dirty Flag
            sed -i 's/-dirty//' ./common/scripts/setlocalversion
          else
            #Remove Dirty Flag
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
            #Remove Abi Exports and Error
            rm -rf ./common/android/abi_gki_protected_exports_*
            perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel
          fi

      - name: Set file name
        run: |
          # Set artifact name base for consistent naming
          # Prepare sublevel for naming
          SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          if [ -n "$ACTUAL_SUBLEVEL" ]; then
            SUBLEVEL_FOR_NAME="$ACTUAL_SUBLEVEL"
          fi
          # Set artifact name base for consistent naming
          ARTIFACT_BASE="${{ inputs.android_version }}-${{ inputs.kernel_version }}.${SUBLEVEL_FOR_NAME}-${{ inputs.os_patch_level }}-${{ matrix.apply_bypass == 'bypass' && 'Bypass' || 'Normal' }}"
          echo "ARTIFACT_BASE=$ARTIFACT_BASE" >> $GITHUB_ENV
          echo "FILE_NAME=$ARTIFACT_BASE" >> $GITHUB_ENV

      - name: Build
        run : |
          set -e
          set -x
          cd "$CONFIG"
          echo "Building the kernel..."
          if [ -f "build/build.sh" ]; then
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh || exit 1
          else
            tools/bazel build --config=fast --lto=thin //common:kernel_aarch64_dist || exit 1
          fi

      - name: Prepare AnyKernel3
        run: |
          # Copy Image from normal build locations
          if [ -f "./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image" ]; then
            cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image AnyKernel3/Image
          elif [ -f "./$CONFIG/bazel-bin/common/kernel_aarch64/Image" ]; then
            cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image AnyKernel3/Image
          else
            echo "Error: Image file not found in any expected location"
            exit 1
          fi

      - name: Search for Kernel Modules
        run: |
          echo "Searching for kernel modules (.ko files)..."
          
          # Function to scan for modules (search only)
          scan_modules() {
            local search_dir="$1"
            local module_count=0
            
            if [ -d "$search_dir" ]; then
              echo "Scanning directory: $search_dir"
              
              # Find all .ko files and report their locations
              while IFS= read -r -d '' module_file; do
                if [ -f "$module_file" ]; then
                  module_name=$(basename "$module_file")
                  echo "Found module: $module_name in $(dirname "$module_file")"
                  ((module_count++))
                fi
              done < <(find "$search_dir" -name "*.ko" -type f -print0 2>/dev/null)
            fi
            
            return $module_count
          }
          
          # Scan common build output directories
          total_modules=0
          
          # Scan bazel-bin directory
          if scan_modules "./$CONFIG/bazel-bin"; then
            total_modules=$((total_modules + $?))
          fi
          
          # Scan out directory
          if scan_modules "./$CONFIG/out"; then
            total_modules=$((total_modules + $?))
          fi
          
          # Scan dist directory specifically
          if scan_modules "./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist"; then
            total_modules=$((total_modules + $?))
          fi
          
          # Look for snd-aloop.ko specifically
          echo "Searching specifically for snd-aloop.ko..."
          snd_aloop_found=$(find ./$CONFIG -name "snd-aloop.ko" -type f 2>/dev/null | head -1)
          if [ -n "$snd_aloop_found" ]; then
            echo "Found snd-aloop.ko at: $snd_aloop_found"
          else
            echo "snd-aloop.ko not found"
          fi
          
          echo "Total kernel modules found: $total_modules"

      - name: Create Bootimgs Folder and Copy Images for Android 12/13
        if: ${{ inputs.android_version == 'android12' || inputs.android_version == 'android13' }}
        run: |
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image ./bootimgs
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image.lz4 ./bootimgs
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image ./
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image.lz4 ./

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz
          gzip -n -k -f -9 ./Image > ./bootimgs/Image.gz

      - name: Create Bootimgs Folder and Copy Images for Android 14/15
        if: ${{ inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz
          gzip -n -k -f -9 ./Image > ./bootimgs/Image.gz

      - name: Android 12 boot image build script
        if: ${{ inputs.android_version == 'android12' }}
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd bootimgs
          
          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level }}"_r1.zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip
          
          # Check if the GKI URL is available
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)
          
          if [ "$status" = "200" ]; then
              echo "[+] Downloading from GKI_URL"
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              echo "[+] $GKI_URL not found, using $FALLBACK_URL"
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi
          
          # Unzip the downloaded kernel and remove the zip
          echo "Unzipping the downloaded kernel..."
          unzip gki-kernel.zip && rm gki-kernel.zip
          
          echo "Unpacking boot.img..."
          FULL_PATH=$(pwd)/boot-5.10.img
          echo "Unpacking using: $FULL_PATH"
          
          echo "Running unpack_bootimg.py..."
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"
          
          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ env.FILE_NAME }}-boot.img
          
          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ env.FILE_NAME }}-boot-gz.img
          
          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../${{ env.FILE_NAME }}-boot-lz4.img

      - name: Android 13/14/15 boot image build script
        if: ${{ inputs.android_version == 'android13' || inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          cd bootimgs
          
          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ env.FILE_NAME }}-boot.img
          
          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ env.FILE_NAME }}-boot-gz.img
          
          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../${{ env.FILE_NAME }}-boot-lz4.img

      - name: Upload AnyKernel3 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-AnyKernel3
          path: |
            ./AnyKernel3/**
          compression-level: 9

      - name: Upload Boot Image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-boot.img
          path: |
            *-boot.img
          compression-level: 9
          
      - name: Upload Boot Image (GZ)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-boot-gz.img
          path: |
            *-boot-gz.img
          compression-level: 9
          
      - name: Upload Boot Image (LZ4)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-boot-lz4.img
          path: |
            *-boot-lz4.img
          compression-level: 9
          
      - name: Upload Raw Image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-Image
          path: |
            Image
          compression-level: 9
          
      - name: Upload Raw Image (GZ)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-Image.gz
          path: |
            Image.gz
          compression-level: 9
          
      - name: Upload Raw Image (LZ4)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-Image.lz4
          path: |
            Image.lz4
          compression-level: 9

      - name: Upload Build Diagnostics
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-Rejected-Patches
          path: patch-rejects
          compression-level: 9
          
      - name: Initialize Kernel Summary
        run: |
          echo "# Kernel Build Summary" >> $GITHUB_STEP_SUMMARY
          
          # Add build variant header
          echo "## ${{ env.FILE_NAME }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Add Build Information
        run: |
          # Add build info
          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Version**: ${{ inputs.android_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Kernel Version**: ${{ inputs.kernel_version }}.${{ inputs.sub_level }}" >> $GITHUB_STEP_SUMMARY
          echo "- **BBG**: Installed" >> $GITHUB_STEP_SUMMARY
          echo "- **Bypass Mode**: ${{ matrix.apply_bypass }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Add KSU Version
        run: |
          # Get Wild_KSU commit
          cd "$CONFIG/Wild_KSU"
          WKSU_COMMIT=$(git rev-parse HEAD)
          WKSU_URL="https://github.com/WildKernels/Wild_KSU/commit/$WKSU_COMMIT"
          echo "- **Wild_KSU**: [$WKSU_COMMIT]($WKSU_URL)" >> $GITHUB_STEP_SUMMARY
          
      - name: Add BBG Version
        run: |
          cd "$CONFIG/Baseband-guard"
          BBG_COMMIT=$(git rev-parse HEAD)
          BBG_URL="https://github.com/vc-teahouse/Baseband-guard/commit/$BBG_COMMIT"
          echo "- **Baseband-guard**: [$BBG_COMMIT]($BBG_URL)" >> $GITHUB_STEP_SUMMARY
          
      - name: Add SUSFS Version
        run: |
          # Get SUSFS4KSU commit
          cd "$GITHUB_WORKSPACE/susfs4ksu"
          SUSFS_COMMIT=$(git rev-parse HEAD)
          SUSFS_URL="https://gitlab.com/simonpunk/susfs4ksu/-/commit/$SUSFS_COMMIT"
          echo "- **SUSFS4KSU (v1.5.12)**: [$SUSFS_COMMIT]($SUSFS_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Add Build Artifacts
        if: ${{ always() }}
        run: |
          # Add artifact summary with presence verification
          echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
      
          # Verify AnyKernel3 contents
          if [ -d "AnyKernel3" ] && [ "$(find AnyKernel3 -type f | wc -l)" -gt 0 ]; then
            AK3_STATUS="✅"
          else
            AK3_STATUS="❌"
          fi
          echo "- **AnyKernel3**: $AK3_STATUS ${{ env.FILE_NAME }}-AnyKernel3" >> $GITHUB_STEP_SUMMARY
      
          echo "### Boot Images" >> $GITHUB_STEP_SUMMARY
          for f in "${{ env.FILE_NAME }}-boot.img" "${{ env.FILE_NAME }}-boot-gz.img" "${{ env.FILE_NAME }}-boot-lz4.img"; do
            if [ -f "$f" ]; then status="✅"; else status="❌"; fi
            case "$f" in
              *boot.img) name="Boot Image (RAW)";;
              *boot-gz.img) name="Boot Image (GZ)";;
              *boot-lz4.img) name="Boot Image (LZ4)";;
            esac
            echo "- **$name**: $status $f" >> $GITHUB_STEP_SUMMARY
          done
      
          echo "### Kernel Images" >> $GITHUB_STEP_SUMMARY
          for f in "Image" "Image.gz" "Image.lz4"; do
            if [ -f "$f" ]; then status="✅"; else status="❌"; fi
            case "$f" in
              Image) name="Kernel Image (RAW)";;
              Image.gz) name="Kernel Image (GZ)";;
              Image.lz4) name="Kernel Image (LZ4)";;
            esac
            echo "- **$name**: $status $f" >> $GITHUB_STEP_SUMMARY
          done
      
          echo "### Diagnostics" >> $GITHUB_STEP_SUMMARY
          echo "- **Rejected Patches**: ${{ env.FILE_NAME }}-Rejected-Patches" >> $GITHUB_STEP_SUMMARY
          if [ -f patch-rejects/index.txt ]; then
            if [ -s patch-rejects/index.txt ]; then
              echo "  Rejected files:" >> $GITHUB_STEP_SUMMARY
              while IFS= read -r line; do
                echo "    - $line" >> $GITHUB_STEP_SUMMARY
              done < patch-rejects/index.txt
            else
              echo "  Rejected file list is empty." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "  No rejected patches found." >> $GITHUB_STEP_SUMMARY
          fi